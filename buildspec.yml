version: 0.1
env:
  secrets-manager:
    AWS_ACCESS_KEY_ID: "build/eks:AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "build/eks:AWS_SECRET_ACCESS_KEY"
    NEXUS_USER: "build/eks:NEXUS_USER"
    NEXUS_PASSWORD: "build/eks:NEXUS_PASSWORD"
phases:
  install:
    commands:
      - echo Preparando entorno
      - sudo yum update -y
       # Instalación de kubectl
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - sudo mv kubectl /usr/local/bin/
      - kubectl version --client
      # Instalación de eksctl
      - curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.140.0/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
      - sudo mv /tmp/eksctl /usr/local/bin
      - eksctl version
       # Instalación de Helm
      - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - helm version | cut -d + -f 1
      # Instalación de Terraform
      - echo "Instalando Terraform..."
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip terraform.zip
      - sudo mv terraform /usr/local/bin/
      - terraform --version
      # Autenticación en Nexus
      - echo autenticando en Nexus Repository
      - pwd
      - ls -la
      - ls -la ./Scripts # Listar específicamente la carpeta de scripts para verificar
      - chmod +x ./Scripts/setup-netrc.sh
      - ./Scripts/setup-netrc.sh
      - echo "Validación del archivo .netrc completada"
      - cat ~/.netrc
      # Autenticación en AWS
      - echo "Autenticando con AWS CLI..."
      - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - aws configure set region $AWS_DEFAULT_REGION
      - aws sts get-caller-identity
  pre_build:
    commands:
      # Crear el cluster
      # Necesito en el terraform asegurar que las reglas de entrada y salida del cluster, incluya una que permita el trafico hacia el grupo de seguridad de quien ejecute el comando, por ejemplo en el caso de cloud9 trafico hacia y desde cluod 9 o si no no se pueden listar los nodos
      - echo "Iniciando despliegue de infraestructura con Terraform"
      - cd Terraform && ls -la
      - cd Terraform && terraform init
      - cd Terraform && terraform plan -var="aws_region=$AWS_DEFAULT_REGION" -var="cluster_name=$EKS_NAME" -var="cluster_service_role_arn=$EKS_SERVICE_ROLE_ARN" -var="node_role_arn=$EKS_NODE_ROLE_ARN"
      - cd Terraform && terraform apply -auto-approve -var="aws_region=$AWS_DEFAULT_REGION" -var="cluster_name=$EKS_NAME" -var="cluster_service_role_arn=$EKS_SERVICE_ROLE_ARN" -var="node_role_arn=$EKS_NODE_ROLE_ARN"
      # Capturar outputs de Terraform
      - VPC_ID=$(terraform output -raw vpc_id)
      - export VPC_ID
      - echo "VPC_ID=$VPC_ID" >> $CODEBUILD_ENV_FILE
      - EFS_ARN=$(terraform output -raw efs_arn)
      - export EFS_ARN
      - echo "EFS_ARN=$EFS_ARN" >> $CODEBUILD_ENV_FILE
      - EFS_DNS_NAME=$(terraform output -raw efs_dns_name)
      - export EFS_DNS_NAME
      - echo "EFS_DNS_NAME=$EFS_DNS_NAME" >> $CODEBUILD_ENV_FILE
      # Validar y Configurar Cluster 
      - aws eks update-kubeconfig --name ${EKS_NAME} --region ${AWS_DEFAULT_REGION}
      - kubectl create namespace ${NAMESPACE}
      - kubectl get pods -n ${NAMESPACE}
      # Configuración del DNS Externo
      - echo "Configurando DNS Externo con Kubernetes"
      - kubectl apply -f files/external-dns.yaml
      - kubectl get configmap external-dns-config -n kube-system
      - kubectl get pods -n kube-system -l app=external-dns
      - echo "DNS externo aplicado correctamente."
      # Configuración de Helm para NFS Client Provisioner para conectar el EFS
      - echo "Configurando NFS Client Provisioner con Helm..."
      - helm repo add stable https://charts.helm.sh/stable
      - helm install alfresco-nfs-provisioner stable/nfs-client-provisioner --set nfs.server="$EFS_DNS_NAME" --set nfs.path="/" --set storageClass.name="nfs-client" --set storageClass.archiveOnDelete=false -n kube-system
      # ingress_setup 
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - kubectl apply -f files/ingress-rbac.yaml -n ${NAMESPACE}
      - helm install acs-ingress ingress-nginx/ingress-nginx --set controller.scope.enabled=true --set controller.scope.namespace=${NAMESPACE} --set rbac.create=true --set controller.config."proxy-body-size"="100m" --set controller.service.targetPorts.https=80 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-backend-protocol"="http" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-ports"="https" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-cert"="${CERTIFICATE_ARN}" --set controller.service.annotations."external-dns\.alpha\.kubernetes\.io/hostname"="acs.${DOMAIN_NAME}" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-negotiation-policy"="ELBSecurityPolicy-TLS-1-2-2017-01" --set controller.publishService.enabled=true --atomic --namespace ${NAMESPACE}
