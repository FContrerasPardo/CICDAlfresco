name: Uninstall and Delete ACS resources

on:
  workflow_dispatch:
    inputs:
      sure:
          description: 'are you Sure to uninstall ACS? yes or no'
          required: true
          type: string

env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # Credentials of repositories
  NEXUS_USER: ${{ secrets.NEXUS_USER }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
  QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
  # Docker image repository
  ECR_NAME: ${{ vars.ECR_NAME }}
  TAG: ${{ vars.TAG }}
  TARGETARCH: ${{ vars.TARGETARCH }}
  # Cluster Configuration
  NAMESPACE: ${{ vars.NAMESPACE }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  NODE_ROLE_ARN: ${{ secrets.NODE_ROLE_ARN }}
  EKS_SERVICE_ROLE_ARN: ${{ secrets.EKS_SERVICE_ROLE_ARN }}
  EFS_PV_NAME: ${{ vars.EFS_PV_NAME }}
  # DNS Configuration
  DOMAIN: ${{ vars.DOMAIN }}
  CERTIFICATE_ARN: ${{ vars.CERTIFICATE_ARN }}

permissions:
  contents: read

jobs:
  Uninstall:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    - name: Check if sure to uninstall ACS
      run: |
        if [ "${{ inputs.sure }}" != "yes" ]; then
          echo "Uninstallation cancelled."
          exit 1
        fi
    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
    - name: Set up eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
    - name: Set up Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
        chmod 700 get_helm.sh
        ./get_helm.sh
        helm version | cut -d + -f 1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Get Kube config file
      id: getconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      # with:
        # terraform_version: 1.6.3
    - name: Terraform init
      id: init
      working-directory: ./Terraform
      run: terraform init 
    

    - name: Uninstall ACS Helm Chart
      run: helm uninstall acs --namespace $NAMESPACE  
    - name: Uninstall ACS Ingress Helm Chart
      run: helm uninstall acs-ingress -n $NAMESPACE  
           helm delete acs-ingress -n $NAMESPACE

       
    - name: Uninstall EBS Service account and Role
      run: |
        aws iam list-roles | grep AmazonEKS_EBS_CSI_DriverRole
        aws iam list-attached-role-policies --role-name AmazonEKS_EBS_CSI_DriverRole
        aws iam detach-role-policy --role-name AmazonEKS_EBS_CSI_DriverRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
        aws iam delete-role --role-name AmazonEKS_EBS_CSI_DriverRole
        kubectl get serviceaccount -n kube-system
        kubectl delete serviceaccount ebs-csi-controller-sa -n kube-system
        kubectl delete serviceaccount ebs-csi-controller-sa -n $NAMESPACE
        eksctl delete iamserviceaccount \
        --name ebs-csi-controller-sa \
        --namespace kube-system \
        --cluster $EKS_CLUSTER_NAME

        
      
    - name: Delete all PVCs
      run: kubectl delete pvc --all -n $NAMESPACE  
    - name: Delete all ConfigMaps
      run: kubectl delete configmap --all -n $NAMESPACE  
    - name: Delete all Secrets
      run: kubectl delete secret --all -n $NAMESPACE  
    - name: Destroy Terraform resources
      id: destroy
      working-directory: ./Terraform
      run: terraform destroy -auto-approve